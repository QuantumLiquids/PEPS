/*
* Author: Hao-Xin Wang<wanghaoxin1996@gmail.com>
* Creation Date: 2025-02-21
*
*/

#ifndef QLPEPS_ALGORITHM_VMC_UPDATE_WAVE_FUNCTION_COMPONENT_CLASSES_WAVE_FUNCTION_COMPONENT_ALL_H
#define QLPEPS_ALGORITHM_VMC_UPDATE_WAVE_FUNCTION_COMPONENT_CLASSES_WAVE_FUNCTION_COMPONENT_ALL_H

namespace qlpeps {
/**
 * Base class for different Monte-Carlo sweep update strategies.
 * The derived class can serve as the template parameter MCSweepUpdater in VMC executor and MC measurement executor.
 */
class MonteCarloSweepUpdaterBase {
 public:
  /**
   Constructor initializes the random number generator (`random_engine_`) using `std::random_device`.
   On Linux, `std::random_device` is expected to produce non-deterministic random numbers.
   In an MPI environment, random number generated by std::random_device in different process
   is also expected to be independent.
   */
  MonteCarloSweepUpdaterBase(void) : random_engine_(std::random_device{}()) {}

  ///< The following member function should be defined in derived class to define the MC sweep strategies.
  template<typename TenElemT, typename QNT>
  void operator()(const SplitIndexTPS<TenElemT, QNT> &sitps,
                  TPSWaveFunctionComponent<TenElemT, QNT> &tps_component,
                  std::vector<double> &accept_rates) {}
 protected:
  std::uniform_real_distribution<double> u_double_ = std::uniform_real_distribution<double>(0, 1.0);
  std::mt19937 random_engine_;
};
}//qlpeps

#include "square_nn_updater.h"
#include "square_3site_updater.h"

#endif //QLPEPS_ALGORITHM_VMC_UPDATE_WAVE_FUNCTION_COMPONENT_CLASSES_WAVE_FUNCTION_COMPONENT_ALL_H
